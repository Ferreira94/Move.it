{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luciano/Documentos/Projetos/NLW#4/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount} xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      startNewChallenge,\n      levelUp,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/luciano/Documentos/Projetos/NLW#4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAiE;AACtE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAoBC;AAApB,MAA4CT,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACjBZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASc,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAGR,YAAY,CAACS,UAAb,KAA4B,SAA/B,EAA0C;AACxC,UAAIT,YAAJ,CAAiB,cAAjB,EAAiC;AAC/BU,QAAAA,IAAI,EAAG,WAAUF,SAAS,CAACG,MAAO;AADH,OAAjC;AAGD;AACF;;AAED,WAASC,cAAT,GAA0B;AACxBhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASiB,iBAAT,GAA6B;AAC3B,QAAG,CAAClB,eAAJ,EAAqB;AACnB;AACD;;AAED,UAAM;AAAEgB,MAAAA;AAAF,QAAahB,eAAnB;AAEA,QAAImB,eAAe,GAAGvB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAGG,eAAe,IAAIjB,qBAAtB,EAA6C;AAC3CiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAK,MAAAA,OAAO;AACR;;AAEDV,IAAAA,oBAAoB,CAACsB,eAAD,CAApB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILE,MAAAA,eAJK;AAKLE,MAAAA,qBALK;AAMLM,MAAAA,iBANK;AAOLD,MAAAA,OAPK;AAQLU,MAAAA,cARK;AASLC,MAAAA;AATK,KADT;AAAA,cAYGzB;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContentData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experienceToNextLevel: number,\n  activeChallenge: Challenge;\n  startNewChallenge: () => void;\n  levelUp: () => void;\n  resetChallenge: () => void;\n  completeChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContentData);\n\nexport function ChallengesProvider({children}: ChallengesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState(0);\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, [])\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge);\n\n    if(Notification.permission === 'granted') {\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount} xp!`\n      })\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if(!activeChallenge) {\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if(finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    <ChallengesContext.Provider \n      value={{ \n        level, \n        currentExperience, \n        challengesCompleted,\n        activeChallenge, \n        experienceToNextLevel,\n        startNewChallenge,\n        levelUp,\n        resetChallenge,\n        completeChallenge\n      }}>\n      {children}\n    </ChallengesContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}